// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class e_changeOwner extends ethereum.Event {
  get params(): e_changeOwner__Params {
    return new e_changeOwner__Params(this);
  }
}

export class e_changeOwner__Params {
  _event: e_changeOwner;

  constructor(event: e_changeOwner) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get param2(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class e_collectProtocolFee extends ethereum.Event {
  get params(): e_collectProtocolFee__Params {
    return new e_collectProtocolFee__Params(this);
  }
}

export class e_collectProtocolFee__Params {
  _event: e_collectProtocolFee;

  constructor(event: e_collectProtocolFee) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get param2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class e_updateGood extends ethereum.Event {
  get params(): e_updateGood__Params {
    return new e_updateGood__Params(this);
  }
}

export class e_updateGood__Params {
  _event: e_updateGood;

  constructor(event: e_updateGood) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get param1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class e_updategoodconfig extends ethereum.Event {
  get params(): e_updategoodconfig__Params {
    return new e_updategoodconfig__Params(this);
  }
}

export class e_updategoodconfig__Params {
  _event: e_updategoodconfig;

  constructor(event: e_updategoodconfig) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get param1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get param2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GoodManage__getGoodStateResultGood_Struct extends ethereum.Tuple {
  get goodConfig(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get erc20address(): Address {
    return this[2].toAddress();
  }

  get currentState(): BigInt {
    return this[3].toBigInt();
  }

  get investState(): BigInt {
    return this[4].toBigInt();
  }

  get feeQunitityState(): BigInt {
    return this[5].toBigInt();
  }
}

export class GoodManage__goodsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getGoodConfig(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getErc20address(): Address {
    return this.value2;
  }

  getCurrentState(): BigInt {
    return this.value3;
  }

  getInvestState(): BigInt {
    return this.value4;
  }

  getFeeQunitityState(): BigInt {
    return this.value5;
  }
}

export class GoodManage extends ethereum.SmartContract {
  static bind(address: Address): GoodManage {
    return new GoodManage("GoodManage", address);
  }

  addbanlist(_user: Address): boolean {
    let result = super.call("addbanlist", "addbanlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_addbanlist(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addbanlist", "addbanlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  banlist(param0: Address): BigInt {
    let result = super.call("banlist", "banlist(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_banlist(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("banlist", "banlist(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeOwner(_goodid: BigInt, _to: Address): boolean {
    let result = super.call(
      "changeOwner",
      "changeOwner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return result[0].toBoolean();
  }

  try_changeOwner(_goodid: BigInt, _to: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeOwner",
      "changeOwner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cusomerno(): BigInt {
    let result = super.call("cusomerno", "cusomerno():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cusomerno(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cusomerno", "cusomerno():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customerno(param0: Address): BigInt {
    let result = super.call("customerno", "customerno(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_customerno(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("customerno", "customerno(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGoodIdByAddress(_owner: Address): Array<BigInt> {
    let result = super.call(
      "getGoodIdByAddress",
      "getGoodIdByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)],
    );

    return result[0].toBigIntArray();
  }

  try_getGoodIdByAddress(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getGoodIdByAddress",
      "getGoodIdByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getGoodState(_goodid: BigInt): GoodManage__getGoodStateResultGood_Struct {
    let result = super.call(
      "getGoodState",
      "getGoodState(uint256):((uint256,address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return changetype<GoodManage__getGoodStateResultGood_Struct>(
      result[0].toTuple(),
    );
  }

  try_getGoodState(
    _goodid: BigInt,
  ): ethereum.CallResult<GoodManage__getGoodStateResultGood_Struct> {
    let result = super.tryCall(
      "getGoodState",
      "getGoodState(uint256):((uint256,address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GoodManage__getGoodStateResultGood_Struct>(value[0].toTuple()),
    );
  }

  getGoodsFee(_goodid: BigInt, user: Address): BigInt {
    let result = super.call(
      "getGoodsFee",
      "getGoodsFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getGoodsFee(_goodid: BigInt, user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGoodsFee",
      "getGoodsFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  goodnum(): BigInt {
    let result = super.call("goodnum", "goodnum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_goodnum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("goodnum", "goodnum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  goods(param0: BigInt): GoodManage__goodsResult {
    let result = super.call(
      "goods",
      "goods(uint256):(uint256,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new GoodManage__goodsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
    );
  }

  try_goods(param0: BigInt): ethereum.CallResult<GoodManage__goodsResult> {
    let result = super.tryCall(
      "goods",
      "goods(uint256):(uint256,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodManage__goodsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
      ),
    );
  }

  goodseq(param0: Bytes): BigInt {
    let result = super.call("goodseq", "goodseq(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBigInt();
  }

  try_goodseq(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("goodseq", "goodseq(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketconfig(): BigInt {
    let result = super.call("marketconfig", "marketconfig():(uint256)", []);

    return result[0].toBigInt();
  }

  try_marketconfig(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("marketconfig", "marketconfig():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketcreator(): Address {
    let result = super.call("marketcreator", "marketcreator():(address)", []);

    return result[0].toAddress();
  }

  try_marketcreator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketcreator",
      "marketcreator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownergoods(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "ownergoods",
      "ownergoods(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_ownergoods(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownergoods",
      "ownergoods(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payGood(_goodid: BigInt, _payquanity: BigInt, _recipent: Address): boolean {
    let result = super.call(
      "payGood",
      "payGood(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_payquanity),
        ethereum.Value.fromAddress(_recipent),
      ],
    );

    return result[0].toBoolean();
  }

  try_payGood(
    _goodid: BigInt,
    _payquanity: BigInt,
    _recipent: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "payGood",
      "payGood(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_payquanity),
        ethereum.Value.fromAddress(_recipent),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  relations(param0: Address): Address {
    let result = super.call("relations", "relations(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_relations(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("relations", "relations(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removebanlist(_user: Address): boolean {
    let result = super.call("removebanlist", "removebanlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_removebanlist(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removebanlist",
      "removebanlist(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMarketConfig(_marketconfig: BigInt): boolean {
    let result = super.call(
      "setMarketConfig",
      "setMarketConfig(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_marketconfig)],
    );

    return result[0].toBoolean();
  }

  try_setMarketConfig(_marketconfig: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMarketConfig",
      "setMarketConfig(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_marketconfig)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateGoodConfig(_goodid: BigInt, _goodConfig: BigInt): boolean {
    let result = super.call(
      "updateGoodConfig",
      "updateGoodConfig(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
      ],
    );

    return result[0].toBoolean();
  }

  try_updateGoodConfig(
    _goodid: BigInt,
    _goodConfig: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateGoodConfig",
      "updateGoodConfig(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updatetoNormalGood(_goodid: BigInt): boolean {
    let result = super.call(
      "updatetoNormalGood",
      "updatetoNormalGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return result[0].toBoolean();
  }

  try_updatetoNormalGood(_goodid: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updatetoNormalGood",
      "updatetoNormalGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updatetoValueGood(_goodid: BigInt): boolean {
    let result = super.call(
      "updatetoValueGood",
      "updatetoValueGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return result[0].toBoolean();
  }

  try_updatetoValueGood(_goodid: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updatetoValueGood",
      "updatetoValueGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddbanlistCall extends ethereum.Call {
  get inputs(): AddbanlistCall__Inputs {
    return new AddbanlistCall__Inputs(this);
  }

  get outputs(): AddbanlistCall__Outputs {
    return new AddbanlistCall__Outputs(this);
  }
}

export class AddbanlistCall__Inputs {
  _call: AddbanlistCall;

  constructor(call: AddbanlistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddbanlistCall__Outputs {
  _call: AddbanlistCall;

  constructor(call: AddbanlistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddrefererCall extends ethereum.Call {
  get inputs(): AddrefererCall__Inputs {
    return new AddrefererCall__Inputs(this);
  }

  get outputs(): AddrefererCall__Outputs {
    return new AddrefererCall__Outputs(this);
  }
}

export class AddrefererCall__Inputs {
  _call: AddrefererCall;

  constructor(call: AddrefererCall) {
    this._call = call;
  }

  get _referer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddrefererCall__Outputs {
  _call: AddrefererCall;

  constructor(call: AddrefererCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CollectProtocolFeeCall extends ethereum.Call {
  get inputs(): CollectProtocolFeeCall__Inputs {
    return new CollectProtocolFeeCall__Inputs(this);
  }

  get outputs(): CollectProtocolFeeCall__Outputs {
    return new CollectProtocolFeeCall__Outputs(this);
  }
}

export class CollectProtocolFeeCall__Inputs {
  _call: CollectProtocolFeeCall;

  constructor(call: CollectProtocolFeeCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectProtocolFeeCall__Outputs {
  _call: CollectProtocolFeeCall;

  constructor(call: CollectProtocolFeeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PayGoodCall extends ethereum.Call {
  get inputs(): PayGoodCall__Inputs {
    return new PayGoodCall__Inputs(this);
  }

  get outputs(): PayGoodCall__Outputs {
    return new PayGoodCall__Outputs(this);
  }
}

export class PayGoodCall__Inputs {
  _call: PayGoodCall;

  constructor(call: PayGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _payquanity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _recipent(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class PayGoodCall__Outputs {
  _call: PayGoodCall;

  constructor(call: PayGoodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemovebanlistCall extends ethereum.Call {
  get inputs(): RemovebanlistCall__Inputs {
    return new RemovebanlistCall__Inputs(this);
  }

  get outputs(): RemovebanlistCall__Outputs {
    return new RemovebanlistCall__Outputs(this);
  }
}

export class RemovebanlistCall__Inputs {
  _call: RemovebanlistCall;

  constructor(call: RemovebanlistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovebanlistCall__Outputs {
  _call: RemovebanlistCall;

  constructor(call: RemovebanlistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMarketConfigCall extends ethereum.Call {
  get inputs(): SetMarketConfigCall__Inputs {
    return new SetMarketConfigCall__Inputs(this);
  }

  get outputs(): SetMarketConfigCall__Outputs {
    return new SetMarketConfigCall__Outputs(this);
  }
}

export class SetMarketConfigCall__Inputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get _marketconfig(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMarketConfigCall__Outputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateGoodConfigCall extends ethereum.Call {
  get inputs(): UpdateGoodConfigCall__Inputs {
    return new UpdateGoodConfigCall__Inputs(this);
  }

  get outputs(): UpdateGoodConfigCall__Outputs {
    return new UpdateGoodConfigCall__Outputs(this);
  }
}

export class UpdateGoodConfigCall__Inputs {
  _call: UpdateGoodConfigCall;

  constructor(call: UpdateGoodConfigCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodConfig(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateGoodConfigCall__Outputs {
  _call: UpdateGoodConfigCall;

  constructor(call: UpdateGoodConfigCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdatetoNormalGoodCall extends ethereum.Call {
  get inputs(): UpdatetoNormalGoodCall__Inputs {
    return new UpdatetoNormalGoodCall__Inputs(this);
  }

  get outputs(): UpdatetoNormalGoodCall__Outputs {
    return new UpdatetoNormalGoodCall__Outputs(this);
  }
}

export class UpdatetoNormalGoodCall__Inputs {
  _call: UpdatetoNormalGoodCall;

  constructor(call: UpdatetoNormalGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatetoNormalGoodCall__Outputs {
  _call: UpdatetoNormalGoodCall;

  constructor(call: UpdatetoNormalGoodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdatetoValueGoodCall extends ethereum.Call {
  get inputs(): UpdatetoValueGoodCall__Inputs {
    return new UpdatetoValueGoodCall__Inputs(this);
  }

  get outputs(): UpdatetoValueGoodCall__Outputs {
    return new UpdatetoValueGoodCall__Outputs(this);
  }
}

export class UpdatetoValueGoodCall__Inputs {
  _call: UpdatetoValueGoodCall;

  constructor(call: UpdatetoValueGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatetoValueGoodCall__Outputs {
  _call: UpdatetoValueGoodCall;

  constructor(call: UpdatetoValueGoodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
