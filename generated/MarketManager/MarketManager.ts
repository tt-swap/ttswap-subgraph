// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class e_buyGood extends ethereum.Event {
  get params(): e_buyGood__Params {
    return new e_buyGood__Params(this);
  }
}

export class e_buyGood__Params {
  _event: e_buyGood;

  constructor(event: e_buyGood) {
    this._event = event;
  }

  get sellgood(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get forgood(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get swapvalue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sellgoodstate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get forgoodstate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class e_buyGoodForPay extends ethereum.Event {
  get params(): e_buyGoodForPay__Params {
    return new e_buyGoodForPay__Params(this);
  }
}

export class e_buyGoodForPay__Params {
  _event: e_buyGoodForPay;

  constructor(event: e_buyGoodForPay) {
    this._event = event;
  }

  get buygood(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get usegood(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receipt(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get swapvalue(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get buygoodstate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get usegoodstate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class e_changeOwner extends ethereum.Event {
  get params(): e_changeOwner__Params {
    return new e_changeOwner__Params(this);
  }
}

export class e_changeOwner__Params {
  _event: e_changeOwner;

  constructor(event: e_changeOwner) {
    this._event = event;
  }

  get _goodid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class e_proof extends ethereum.Event {
  get params(): e_proof__Params {
    return new e_proof__Params(this);
  }
}

export class e_proof__Params {
  _event: e_proof;

  constructor(event: e_proof) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketManager__buyGoodResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getGoodid2Quanitity_(): BigInt {
    return this.value0;
  }

  getGoodid2FeeQuanitity_(): BigInt {
    return this.value1;
  }
}

export class MarketManager__buyGoodForPayResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getGoodid1Quanitity_(): BigInt {
    return this.value0;
  }

  getGoodid1FeeQuanitity_(): BigInt {
    return this.value1;
  }
}

export class MarketManager__disinvestNormalGoodResultDisinvestNormalResult1_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__disinvestNormalGoodResultDisinvestValueResult2_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__disinvestNormalGoodResult {
  value0: MarketManager__disinvestNormalGoodResultDisinvestNormalResult1_Struct;
  value1: MarketManager__disinvestNormalGoodResultDisinvestValueResult2_Struct;
  value2: BigInt;

  constructor(
    value0: MarketManager__disinvestNormalGoodResultDisinvestNormalResult1_Struct,
    value1: MarketManager__disinvestNormalGoodResultDisinvestValueResult2_Struct,
    value2: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDisinvestNormalResult1_(): MarketManager__disinvestNormalGoodResultDisinvestNormalResult1_Struct {
    return this.value0;
  }

  getDisinvestValueResult2_(): MarketManager__disinvestNormalGoodResultDisinvestValueResult2_Struct {
    return this.value1;
  }

  getNormalproofno_(): BigInt {
    return this.value2;
  }
}

export class MarketManager__disinvestNormalProofResultDisinvestNormalResult1_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__disinvestNormalProofResultDisinvestValueResult2_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__disinvestNormalProofResult {
  value0: MarketManager__disinvestNormalProofResultDisinvestNormalResult1_Struct;
  value1: MarketManager__disinvestNormalProofResultDisinvestValueResult2_Struct;

  constructor(
    value0: MarketManager__disinvestNormalProofResultDisinvestNormalResult1_Struct,
    value1: MarketManager__disinvestNormalProofResultDisinvestValueResult2_Struct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getDisinvestNormalResult1_(): MarketManager__disinvestNormalProofResultDisinvestNormalResult1_Struct {
    return this.value0;
  }

  getDisinvestValueResult2_(): MarketManager__disinvestNormalProofResultDisinvestValueResult2_Struct {
    return this.value1;
  }
}

export class MarketManager__disinvestValueGoodResultDisinvestResult_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__disinvestValueGoodResult {
  value0: MarketManager__disinvestValueGoodResultDisinvestResult_Struct;
  value1: BigInt;

  constructor(
    value0: MarketManager__disinvestValueGoodResultDisinvestResult_Struct,
    value1: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDisinvestResult_(): MarketManager__disinvestValueGoodResultDisinvestResult_Struct {
    return this.value0;
  }

  getValueProofno_(): BigInt {
    return this.value1;
  }
}

export class MarketManager__disinvestValueProofResultDisinvestResult_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__getGoodStateResultGood_Struct extends ethereum.Tuple {
  get goodConfig(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get erc20address(): Address {
    return this[2].toAddress();
  }

  get currentState(): BigInt {
    return this[3].toBigInt();
  }

  get investState(): BigInt {
    return this[4].toBigInt();
  }

  get feeQunitityState(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketManager__getProofIdInput_investproofkeyStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get currentgood(): BigInt {
    return this[1].toBigInt();
  }

  get valuegood(): BigInt {
    return this[2].toBigInt();
  }
}

export class MarketManager__getProofStateResultProof_Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get currentgood(): BigInt {
    return this[1].toBigInt();
  }

  get valuegood(): BigInt {
    return this[2].toBigInt();
  }

  get state(): BigInt {
    return this[3].toBigInt();
  }

  get invest(): BigInt {
    return this[4].toBigInt();
  }

  get valueinvest(): BigInt {
    return this[5].toBigInt();
  }

  get approval(): Address {
    return this[6].toAddress();
  }

  get beneficiary(): Address {
    return this[7].toAddress();
  }
}

export class MarketManager__initMetaGoodResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class MarketManager__initNormalGoodResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class MarketManager__investNormalGoodResultNormalInvest_Struct extends ethereum.Tuple {
  get actualFeeQuantity(): BigInt {
    return this[0].toBigInt();
  }

  get contructFeeQuantity(): BigInt {
    return this[1].toBigInt();
  }

  get actualInvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualInvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__investNormalGoodResultValueInvest_Struct extends ethereum.Tuple {
  get actualFeeQuantity(): BigInt {
    return this[0].toBigInt();
  }

  get contructFeeQuantity(): BigInt {
    return this[1].toBigInt();
  }

  get actualInvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualInvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__investNormalGoodResult {
  value0: MarketManager__investNormalGoodResultNormalInvest_Struct;
  value1: MarketManager__investNormalGoodResultValueInvest_Struct;
  value2: BigInt;

  constructor(
    value0: MarketManager__investNormalGoodResultNormalInvest_Struct,
    value1: MarketManager__investNormalGoodResultValueInvest_Struct,
    value2: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getNormalInvest_(): MarketManager__investNormalGoodResultNormalInvest_Struct {
    return this.value0;
  }

  getValueInvest_(): MarketManager__investNormalGoodResultValueInvest_Struct {
    return this.value1;
  }

  getProofno_(): BigInt {
    return this.value2;
  }
}

export class MarketManager__investValueGoodResultValueInvest_Struct extends ethereum.Tuple {
  get actualFeeQuantity(): BigInt {
    return this[0].toBigInt();
  }

  get contructFeeQuantity(): BigInt {
    return this[1].toBigInt();
  }

  get actualInvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualInvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketManager__investValueGoodResult {
  value0: MarketManager__investValueGoodResultValueInvest_Struct;
  value1: BigInt;

  constructor(
    value0: MarketManager__investValueGoodResultValueInvest_Struct,
    value1: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValueInvest_(): MarketManager__investValueGoodResultValueInvest_Struct {
    return this.value0;
  }

  getValueProofno_(): BigInt {
    return this.value1;
  }
}

export class MarketManager extends ethereum.SmartContract {
  static bind(address: Address): MarketManager {
    return new MarketManager("MarketManager", address);
  }

  addbanlist(_user: Address): boolean {
    let result = super.call("addbanlist", "addbanlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_addbanlist(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addbanlist", "addbanlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addreferer(_referer: Address): boolean {
    let result = super.call("addreferer", "addreferer(address):(bool)", [
      ethereum.Value.fromAddress(_referer),
    ]);

    return result[0].toBoolean();
  }

  try_addreferer(_referer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addreferer", "addreferer(address):(bool)", [
      ethereum.Value.fromAddress(_referer),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyGood(
    _goodid1: BigInt,
    _goodid2: BigInt,
    _swapQuanitity: BigInt,
    _limitPrice: BigInt,
    _istotal: boolean,
    _gater: Address,
  ): MarketManager__buyGoodResult {
    let result = super.call(
      "buyGood",
      "buyGood(uint256,uint256,uint128,uint256,bool,address):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid1),
        ethereum.Value.fromUnsignedBigInt(_goodid2),
        ethereum.Value.fromUnsignedBigInt(_swapQuanitity),
        ethereum.Value.fromUnsignedBigInt(_limitPrice),
        ethereum.Value.fromBoolean(_istotal),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return new MarketManager__buyGoodResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_buyGood(
    _goodid1: BigInt,
    _goodid2: BigInt,
    _swapQuanitity: BigInt,
    _limitPrice: BigInt,
    _istotal: boolean,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__buyGoodResult> {
    let result = super.tryCall(
      "buyGood",
      "buyGood(uint256,uint256,uint128,uint256,bool,address):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid1),
        ethereum.Value.fromUnsignedBigInt(_goodid2),
        ethereum.Value.fromUnsignedBigInt(_swapQuanitity),
        ethereum.Value.fromUnsignedBigInt(_limitPrice),
        ethereum.Value.fromBoolean(_istotal),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__buyGoodResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  buyGoodForPay(
    _goodid1: BigInt,
    _goodid2: BigInt,
    _swapQuanitity: BigInt,
    _limitPrice: BigInt,
    _recipent: Address,
    _gater: Address,
  ): MarketManager__buyGoodForPayResult {
    let result = super.call(
      "buyGoodForPay",
      "buyGoodForPay(uint256,uint256,uint128,uint256,address,address):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid1),
        ethereum.Value.fromUnsignedBigInt(_goodid2),
        ethereum.Value.fromUnsignedBigInt(_swapQuanitity),
        ethereum.Value.fromUnsignedBigInt(_limitPrice),
        ethereum.Value.fromAddress(_recipent),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return new MarketManager__buyGoodForPayResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_buyGoodForPay(
    _goodid1: BigInt,
    _goodid2: BigInt,
    _swapQuanitity: BigInt,
    _limitPrice: BigInt,
    _recipent: Address,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__buyGoodForPayResult> {
    let result = super.tryCall(
      "buyGoodForPay",
      "buyGoodForPay(uint256,uint256,uint128,uint256,address,address):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid1),
        ethereum.Value.fromUnsignedBigInt(_goodid2),
        ethereum.Value.fromUnsignedBigInt(_swapQuanitity),
        ethereum.Value.fromUnsignedBigInt(_limitPrice),
        ethereum.Value.fromAddress(_recipent),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__buyGoodForPayResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  changeGoodOwner(_goodid: BigInt, _to: Address): boolean {
    let result = super.call(
      "changeGoodOwner",
      "changeGoodOwner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return result[0].toBoolean();
  }

  try_changeGoodOwner(
    _goodid: BigInt,
    _to: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeGoodOwner",
      "changeGoodOwner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  changeProofOwner(_proofid: BigInt, _to: Address): boolean {
    let result = super.call(
      "changeProofOwner",
      "changeProofOwner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_proofid),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return result[0].toBoolean();
  }

  try_changeProofOwner(
    _proofid: BigInt,
    _to: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeProofOwner",
      "changeProofOwner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_proofid),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  check_banlist(_user: Address): boolean {
    let result = super.call("check_banlist", "check_banlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_check_banlist(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "check_banlist",
      "check_banlist(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collectNormalProofFee(_normalProofid: BigInt): BigInt {
    let result = super.call(
      "collectNormalProofFee",
      "collectNormalProofFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_normalProofid)],
    );

    return result[0].toBigInt();
  }

  try_collectNormalProofFee(
    _normalProofid: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectNormalProofFee",
      "collectNormalProofFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_normalProofid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectProtocolFee(_goodid: BigInt): BigInt {
    let result = super.call(
      "collectProtocolFee",
      "collectProtocolFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return result[0].toBigInt();
  }

  try_collectProtocolFee(_goodid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectProtocolFee",
      "collectProtocolFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectValueProofFee(_valueProofid: BigInt): BigInt {
    let result = super.call(
      "collectValueProofFee",
      "collectValueProofFee(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(_valueProofid)],
    );

    return result[0].toBigInt();
  }

  try_collectValueProofFee(_valueProofid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectValueProofFee",
      "collectValueProofFee(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(_valueProofid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customerno(param0: Address): BigInt {
    let result = super.call("customerno", "customerno(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_customerno(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("customerno", "customerno(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customernum(): BigInt {
    let result = super.call("customernum", "customernum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_customernum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("customernum", "customernum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disinvestNormalGood(
    _togood: BigInt,
    _valuegood: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): MarketManager__disinvestNormalGoodResult {
    let result = super.call(
      "disinvestNormalGood",
      "disinvestNormalGood(uint256,uint256,uint128,address):((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_togood),
        ethereum.Value.fromUnsignedBigInt(_valuegood),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return changetype<MarketManager__disinvestNormalGoodResult>(
      new MarketManager__disinvestNormalGoodResult(
        changetype<MarketManager__disinvestNormalGoodResultDisinvestNormalResult1_Struct>(
          result[0].toTuple(),
        ),
        changetype<MarketManager__disinvestNormalGoodResultDisinvestValueResult2_Struct>(
          result[1].toTuple(),
        ),
        result[2].toBigInt(),
      ),
    );
  }

  try_disinvestNormalGood(
    _togood: BigInt,
    _valuegood: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__disinvestNormalGoodResult> {
    let result = super.tryCall(
      "disinvestNormalGood",
      "disinvestNormalGood(uint256,uint256,uint128,address):((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_togood),
        ethereum.Value.fromUnsignedBigInt(_valuegood),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__disinvestNormalGoodResult>(
        new MarketManager__disinvestNormalGoodResult(
          changetype<MarketManager__disinvestNormalGoodResultDisinvestNormalResult1_Struct>(
            value[0].toTuple(),
          ),
          changetype<MarketManager__disinvestNormalGoodResultDisinvestValueResult2_Struct>(
            value[1].toTuple(),
          ),
          value[2].toBigInt(),
        ),
      ),
    );
  }

  disinvestNormalProof(
    _normalProof: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): MarketManager__disinvestNormalProofResult {
    let result = super.call(
      "disinvestNormalProof",
      "disinvestNormalProof(uint256,uint128,address):((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128))",
      [
        ethereum.Value.fromUnsignedBigInt(_normalProof),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return changetype<MarketManager__disinvestNormalProofResult>(
      new MarketManager__disinvestNormalProofResult(
        changetype<MarketManager__disinvestNormalProofResultDisinvestNormalResult1_Struct>(
          result[0].toTuple(),
        ),
        changetype<MarketManager__disinvestNormalProofResultDisinvestValueResult2_Struct>(
          result[1].toTuple(),
        ),
      ),
    );
  }

  try_disinvestNormalProof(
    _normalProof: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__disinvestNormalProofResult> {
    let result = super.tryCall(
      "disinvestNormalProof",
      "disinvestNormalProof(uint256,uint128,address):((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128))",
      [
        ethereum.Value.fromUnsignedBigInt(_normalProof),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__disinvestNormalProofResult>(
        new MarketManager__disinvestNormalProofResult(
          changetype<MarketManager__disinvestNormalProofResultDisinvestNormalResult1_Struct>(
            value[0].toTuple(),
          ),
          changetype<MarketManager__disinvestNormalProofResultDisinvestValueResult2_Struct>(
            value[1].toTuple(),
          ),
        ),
      ),
    );
  }

  disinvestValueGood(
    _goodid: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): MarketManager__disinvestValueGoodResult {
    let result = super.call(
      "disinvestValueGood",
      "disinvestValueGood(uint256,uint128,address):((uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return changetype<MarketManager__disinvestValueGoodResult>(
      new MarketManager__disinvestValueGoodResult(
        changetype<MarketManager__disinvestValueGoodResultDisinvestResult_Struct>(
          result[0].toTuple(),
        ),
        result[1].toBigInt(),
      ),
    );
  }

  try_disinvestValueGood(
    _goodid: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__disinvestValueGoodResult> {
    let result = super.tryCall(
      "disinvestValueGood",
      "disinvestValueGood(uint256,uint128,address):((uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__disinvestValueGoodResult>(
        new MarketManager__disinvestValueGoodResult(
          changetype<MarketManager__disinvestValueGoodResultDisinvestResult_Struct>(
            value[0].toTuple(),
          ),
          value[1].toBigInt(),
        ),
      ),
    );
  }

  disinvestValueProof(
    _valueproofid: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): MarketManager__disinvestValueProofResultDisinvestResult_Struct {
    let result = super.call(
      "disinvestValueProof",
      "disinvestValueProof(uint256,uint128,address):((uint128,uint128,uint128,uint128))",
      [
        ethereum.Value.fromUnsignedBigInt(_valueproofid),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return changetype<MarketManager__disinvestValueProofResultDisinvestResult_Struct>(
      result[0].toTuple(),
    );
  }

  try_disinvestValueProof(
    _valueproofid: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__disinvestValueProofResultDisinvestResult_Struct> {
    let result = super.tryCall(
      "disinvestValueProof",
      "disinvestValueProof(uint256,uint128,address):((uint128,uint128,uint128,uint128))",
      [
        ethereum.Value.fromUnsignedBigInt(_valueproofid),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__disinvestValueProofResultDisinvestResult_Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getApproved(proofId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(proofId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(proofId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(proofId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGoodIdByAddress(_owner: Address, _key: BigInt): BigInt {
    let result = super.call(
      "getGoodIdByAddress",
      "getGoodIdByAddress(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_key),
      ],
    );

    return result[0].toBigInt();
  }

  try_getGoodIdByAddress(
    _owner: Address,
    _key: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGoodIdByAddress",
      "getGoodIdByAddress(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_key),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGoodState(_goodid: BigInt): MarketManager__getGoodStateResultGood_Struct {
    let result = super.call(
      "getGoodState",
      "getGoodState(uint256):((uint256,address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return changetype<MarketManager__getGoodStateResultGood_Struct>(
      result[0].toTuple(),
    );
  }

  try_getGoodState(
    _goodid: BigInt,
  ): ethereum.CallResult<MarketManager__getGoodStateResultGood_Struct> {
    let result = super.tryCall(
      "getGoodState",
      "getGoodState(uint256):((uint256,address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__getGoodStateResultGood_Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getGoodsFee(_goodid: BigInt, user: Address): BigInt {
    let result = super.call(
      "getGoodsFee",
      "getGoodsFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getGoodsFee(_goodid: BigInt, user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGoodsFee",
      "getGoodsFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProofId(
    _investproofkey: MarketManager__getProofIdInput_investproofkeyStruct,
  ): BigInt {
    let result = super.call(
      "getProofId",
      "getProofId((address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_investproofkey)],
    );

    return result[0].toBigInt();
  }

  try_getProofId(
    _investproofkey: MarketManager__getProofIdInput_investproofkeyStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProofId",
      "getProofId((address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_investproofkey)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProofState(
    _proof: BigInt,
  ): MarketManager__getProofStateResultProof_Struct {
    let result = super.call(
      "getProofState",
      "getProofState(uint256):((address,uint256,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_proof)],
    );

    return changetype<MarketManager__getProofStateResultProof_Struct>(
      result[0].toTuple(),
    );
  }

  try_getProofState(
    _proof: BigInt,
  ): ethereum.CallResult<MarketManager__getProofStateResultProof_Struct> {
    let result = super.tryCall(
      "getProofState",
      "getProofState(uint256):((address,uint256,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_proof)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__getProofStateResultProof_Struct>(
        value[0].toTuple(),
      ),
    );
  }

  goodnum(): BigInt {
    let result = super.call("goodnum", "goodnum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_goodnum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("goodnum", "goodnum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initMetaGood(
    _erc20address: Address,
    _initial: BigInt,
    _goodConfig: BigInt,
  ): MarketManager__initMetaGoodResult {
    let result = super.call(
      "initMetaGood",
      "initMetaGood(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_erc20address),
        ethereum.Value.fromUnsignedBigInt(_initial),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
      ],
    );

    return new MarketManager__initMetaGoodResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_initMetaGood(
    _erc20address: Address,
    _initial: BigInt,
    _goodConfig: BigInt,
  ): ethereum.CallResult<MarketManager__initMetaGoodResult> {
    let result = super.tryCall(
      "initMetaGood",
      "initMetaGood(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_erc20address),
        ethereum.Value.fromUnsignedBigInt(_initial),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__initMetaGoodResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  initNormalGood(
    _valuegood: BigInt,
    _initial: BigInt,
    _erc20address: Address,
    _goodConfig: BigInt,
    _gater: Address,
  ): MarketManager__initNormalGoodResult {
    let result = super.call(
      "initNormalGood",
      "initNormalGood(uint256,uint256,address,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_valuegood),
        ethereum.Value.fromUnsignedBigInt(_initial),
        ethereum.Value.fromAddress(_erc20address),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return new MarketManager__initNormalGoodResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_initNormalGood(
    _valuegood: BigInt,
    _initial: BigInt,
    _erc20address: Address,
    _goodConfig: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__initNormalGoodResult> {
    let result = super.tryCall(
      "initNormalGood",
      "initNormalGood(uint256,uint256,address,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_valuegood),
        ethereum.Value.fromUnsignedBigInt(_initial),
        ethereum.Value.fromAddress(_erc20address),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__initNormalGoodResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  investNormalGood(
    _togood: BigInt,
    _valuegood: BigInt,
    _quanitity: BigInt,
    _gater: Address,
  ): MarketManager__investNormalGoodResult {
    let result = super.call(
      "investNormalGood",
      "investNormalGood(uint256,uint256,uint128,address):((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_togood),
        ethereum.Value.fromUnsignedBigInt(_valuegood),
        ethereum.Value.fromUnsignedBigInt(_quanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return changetype<MarketManager__investNormalGoodResult>(
      new MarketManager__investNormalGoodResult(
        changetype<MarketManager__investNormalGoodResultNormalInvest_Struct>(
          result[0].toTuple(),
        ),
        changetype<MarketManager__investNormalGoodResultValueInvest_Struct>(
          result[1].toTuple(),
        ),
        result[2].toBigInt(),
      ),
    );
  }

  try_investNormalGood(
    _togood: BigInt,
    _valuegood: BigInt,
    _quanitity: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__investNormalGoodResult> {
    let result = super.tryCall(
      "investNormalGood",
      "investNormalGood(uint256,uint256,uint128,address):((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_togood),
        ethereum.Value.fromUnsignedBigInt(_valuegood),
        ethereum.Value.fromUnsignedBigInt(_quanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__investNormalGoodResult>(
        new MarketManager__investNormalGoodResult(
          changetype<MarketManager__investNormalGoodResultNormalInvest_Struct>(
            value[0].toTuple(),
          ),
          changetype<MarketManager__investNormalGoodResultValueInvest_Struct>(
            value[1].toTuple(),
          ),
          value[2].toBigInt(),
        ),
      ),
    );
  }

  investValueGood(
    _goodid: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): MarketManager__investValueGoodResult {
    let result = super.call(
      "investValueGood",
      "investValueGood(uint256,uint128,address):((uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );

    return changetype<MarketManager__investValueGoodResult>(
      new MarketManager__investValueGoodResult(
        changetype<MarketManager__investValueGoodResultValueInvest_Struct>(
          result[0].toTuple(),
        ),
        result[1].toBigInt(),
      ),
    );
  }

  try_investValueGood(
    _goodid: BigInt,
    _goodQuanitity: BigInt,
    _gater: Address,
  ): ethereum.CallResult<MarketManager__investValueGoodResult> {
    let result = super.tryCall(
      "investValueGood",
      "investValueGood(uint256,uint128,address):((uint128,uint128,uint128,uint128),uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodQuanitity),
        ethereum.Value.fromAddress(_gater),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__investValueGoodResult>(
        new MarketManager__investValueGoodResult(
          changetype<MarketManager__investValueGoodResultValueInvest_Struct>(
            value[0].toTuple(),
          ),
          value[1].toBigInt(),
        ),
      ),
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketconfig(): BigInt {
    let result = super.call("marketconfig", "marketconfig():(uint256)", []);

    return result[0].toBigInt();
  }

  try_marketconfig(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("marketconfig", "marketconfig():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketcreator(): Address {
    let result = super.call("marketcreator", "marketcreator():(address)", []);

    return result[0].toAddress();
  }

  try_marketcreator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketcreator",
      "marketcreator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(proofId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(proofId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(proofId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(proofId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payGood(_goodid: BigInt, _payquanity: BigInt, _recipent: Address): boolean {
    let result = super.call(
      "payGood",
      "payGood(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_payquanity),
        ethereum.Value.fromAddress(_recipent),
      ],
    );

    return result[0].toBoolean();
  }

  try_payGood(
    _goodid: BigInt,
    _payquanity: BigInt,
    _recipent: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "payGood",
      "payGood(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_payquanity),
        ethereum.Value.fromAddress(_recipent),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proofseq(param0: Bytes): BigInt {
    let result = super.call("proofseq", "proofseq(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBigInt();
  }

  try_proofseq(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proofseq", "proofseq(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relations(param0: Address): Address {
    let result = super.call("relations", "relations(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_relations(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("relations", "relations(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removebanlist(_user: Address): boolean {
    let result = super.call("removebanlist", "removebanlist(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_removebanlist(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removebanlist",
      "removebanlist(address):(bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMarketConfig(_marketconfig: BigInt): boolean {
    let result = super.call(
      "setMarketConfig",
      "setMarketConfig(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_marketconfig)],
    );

    return result[0].toBoolean();
  }

  try_setMarketConfig(_marketconfig: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMarketConfig",
      "setMarketConfig(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_marketconfig)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(_index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_index),
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _index: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(proofId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(proofId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(proofId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(proofId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateGoodConfig(_goodid: BigInt, _goodConfig: BigInt): boolean {
    let result = super.call(
      "updateGoodConfig",
      "updateGoodConfig(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
      ],
    );

    return result[0].toBoolean();
  }

  try_updateGoodConfig(
    _goodid: BigInt,
    _goodConfig: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateGoodConfig",
      "updateGoodConfig(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_goodid),
        ethereum.Value.fromUnsignedBigInt(_goodConfig),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updatetoNormalGood(_goodid: BigInt): boolean {
    let result = super.call(
      "updatetoNormalGood",
      "updatetoNormalGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return result[0].toBoolean();
  }

  try_updatetoNormalGood(_goodid: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updatetoNormalGood",
      "updatetoNormalGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updatetoValueGood(_goodid: BigInt): boolean {
    let result = super.call(
      "updatetoValueGood",
      "updatetoValueGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );

    return result[0].toBoolean();
  }

  try_updatetoValueGood(_goodid: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updatetoValueGood",
      "updatetoValueGood(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_goodid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _marketcreator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _marketconfig(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddbanlistCall extends ethereum.Call {
  get inputs(): AddbanlistCall__Inputs {
    return new AddbanlistCall__Inputs(this);
  }

  get outputs(): AddbanlistCall__Outputs {
    return new AddbanlistCall__Outputs(this);
  }
}

export class AddbanlistCall__Inputs {
  _call: AddbanlistCall;

  constructor(call: AddbanlistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddbanlistCall__Outputs {
  _call: AddbanlistCall;

  constructor(call: AddbanlistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddrefererCall extends ethereum.Call {
  get inputs(): AddrefererCall__Inputs {
    return new AddrefererCall__Inputs(this);
  }

  get outputs(): AddrefererCall__Outputs {
    return new AddrefererCall__Outputs(this);
  }
}

export class AddrefererCall__Inputs {
  _call: AddrefererCall;

  constructor(call: AddrefererCall) {
    this._call = call;
  }

  get _referer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddrefererCall__Outputs {
  _call: AddrefererCall;

  constructor(call: AddrefererCall) {
    this._call = call;
  }

  get is_success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proofId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BuyGoodCall extends ethereum.Call {
  get inputs(): BuyGoodCall__Inputs {
    return new BuyGoodCall__Inputs(this);
  }

  get outputs(): BuyGoodCall__Outputs {
    return new BuyGoodCall__Outputs(this);
  }
}

export class BuyGoodCall__Inputs {
  _call: BuyGoodCall;

  constructor(call: BuyGoodCall) {
    this._call = call;
  }

  get _goodid1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodid2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _swapQuanitity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _limitPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _istotal(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _gater(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class BuyGoodCall__Outputs {
  _call: BuyGoodCall;

  constructor(call: BuyGoodCall) {
    this._call = call;
  }

  get goodid2Quanitity_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get goodid2FeeQuanitity_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BuyGoodForPayCall extends ethereum.Call {
  get inputs(): BuyGoodForPayCall__Inputs {
    return new BuyGoodForPayCall__Inputs(this);
  }

  get outputs(): BuyGoodForPayCall__Outputs {
    return new BuyGoodForPayCall__Outputs(this);
  }
}

export class BuyGoodForPayCall__Inputs {
  _call: BuyGoodForPayCall;

  constructor(call: BuyGoodForPayCall) {
    this._call = call;
  }

  get _goodid1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodid2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _swapQuanitity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _limitPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _recipent(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _gater(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class BuyGoodForPayCall__Outputs {
  _call: BuyGoodForPayCall;

  constructor(call: BuyGoodForPayCall) {
    this._call = call;
  }

  get goodid1Quanitity_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get goodid1FeeQuanitity_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ChangeGoodOwnerCall extends ethereum.Call {
  get inputs(): ChangeGoodOwnerCall__Inputs {
    return new ChangeGoodOwnerCall__Inputs(this);
  }

  get outputs(): ChangeGoodOwnerCall__Outputs {
    return new ChangeGoodOwnerCall__Outputs(this);
  }
}

export class ChangeGoodOwnerCall__Inputs {
  _call: ChangeGoodOwnerCall;

  constructor(call: ChangeGoodOwnerCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeGoodOwnerCall__Outputs {
  _call: ChangeGoodOwnerCall;

  constructor(call: ChangeGoodOwnerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeProofOwnerCall extends ethereum.Call {
  get inputs(): ChangeProofOwnerCall__Inputs {
    return new ChangeProofOwnerCall__Inputs(this);
  }

  get outputs(): ChangeProofOwnerCall__Outputs {
    return new ChangeProofOwnerCall__Outputs(this);
  }
}

export class ChangeProofOwnerCall__Inputs {
  _call: ChangeProofOwnerCall;

  constructor(call: ChangeProofOwnerCall) {
    this._call = call;
  }

  get _proofid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeProofOwnerCall__Outputs {
  _call: ChangeProofOwnerCall;

  constructor(call: ChangeProofOwnerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CollectNormalProofFeeCall extends ethereum.Call {
  get inputs(): CollectNormalProofFeeCall__Inputs {
    return new CollectNormalProofFeeCall__Inputs(this);
  }

  get outputs(): CollectNormalProofFeeCall__Outputs {
    return new CollectNormalProofFeeCall__Outputs(this);
  }
}

export class CollectNormalProofFeeCall__Inputs {
  _call: CollectNormalProofFeeCall;

  constructor(call: CollectNormalProofFeeCall) {
    this._call = call;
  }

  get _normalProofid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectNormalProofFeeCall__Outputs {
  _call: CollectNormalProofFeeCall;

  constructor(call: CollectNormalProofFeeCall) {
    this._call = call;
  }

  get profit_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectProtocolFeeCall extends ethereum.Call {
  get inputs(): CollectProtocolFeeCall__Inputs {
    return new CollectProtocolFeeCall__Inputs(this);
  }

  get outputs(): CollectProtocolFeeCall__Outputs {
    return new CollectProtocolFeeCall__Outputs(this);
  }
}

export class CollectProtocolFeeCall__Inputs {
  _call: CollectProtocolFeeCall;

  constructor(call: CollectProtocolFeeCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectProtocolFeeCall__Outputs {
  _call: CollectProtocolFeeCall;

  constructor(call: CollectProtocolFeeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectValueProofFeeCall extends ethereum.Call {
  get inputs(): CollectValueProofFeeCall__Inputs {
    return new CollectValueProofFeeCall__Inputs(this);
  }

  get outputs(): CollectValueProofFeeCall__Outputs {
    return new CollectValueProofFeeCall__Outputs(this);
  }
}

export class CollectValueProofFeeCall__Inputs {
  _call: CollectValueProofFeeCall;

  constructor(call: CollectValueProofFeeCall) {
    this._call = call;
  }

  get _valueProofid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectValueProofFeeCall__Outputs {
  _call: CollectValueProofFeeCall;

  constructor(call: CollectValueProofFeeCall) {
    this._call = call;
  }

  get profit_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisinvestNormalGoodCall extends ethereum.Call {
  get inputs(): DisinvestNormalGoodCall__Inputs {
    return new DisinvestNormalGoodCall__Inputs(this);
  }

  get outputs(): DisinvestNormalGoodCall__Outputs {
    return new DisinvestNormalGoodCall__Outputs(this);
  }
}

export class DisinvestNormalGoodCall__Inputs {
  _call: DisinvestNormalGoodCall;

  constructor(call: DisinvestNormalGoodCall) {
    this._call = call;
  }

  get _togood(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _valuegood(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _goodQuanitity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DisinvestNormalGoodCall__Outputs {
  _call: DisinvestNormalGoodCall;

  constructor(call: DisinvestNormalGoodCall) {
    this._call = call;
  }

  get disinvestNormalResult1_(): DisinvestNormalGoodCallDisinvestNormalResult1_Struct {
    return changetype<DisinvestNormalGoodCallDisinvestNormalResult1_Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get disinvestValueResult2_(): DisinvestNormalGoodCallDisinvestValueResult2_Struct {
    return changetype<DisinvestNormalGoodCallDisinvestValueResult2_Struct>(
      this._call.outputValues[1].value.toTuple(),
    );
  }

  get normalproofno_(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class DisinvestNormalGoodCallDisinvestNormalResult1_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class DisinvestNormalGoodCallDisinvestValueResult2_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class DisinvestNormalProofCall extends ethereum.Call {
  get inputs(): DisinvestNormalProofCall__Inputs {
    return new DisinvestNormalProofCall__Inputs(this);
  }

  get outputs(): DisinvestNormalProofCall__Outputs {
    return new DisinvestNormalProofCall__Outputs(this);
  }
}

export class DisinvestNormalProofCall__Inputs {
  _call: DisinvestNormalProofCall;

  constructor(call: DisinvestNormalProofCall) {
    this._call = call;
  }

  get _normalProof(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodQuanitity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DisinvestNormalProofCall__Outputs {
  _call: DisinvestNormalProofCall;

  constructor(call: DisinvestNormalProofCall) {
    this._call = call;
  }

  get disinvestNormalResult1_(): DisinvestNormalProofCallDisinvestNormalResult1_Struct {
    return changetype<DisinvestNormalProofCallDisinvestNormalResult1_Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get disinvestValueResult2_(): DisinvestNormalProofCallDisinvestValueResult2_Struct {
    return changetype<DisinvestNormalProofCallDisinvestValueResult2_Struct>(
      this._call.outputValues[1].value.toTuple(),
    );
  }
}

export class DisinvestNormalProofCallDisinvestNormalResult1_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class DisinvestNormalProofCallDisinvestValueResult2_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class DisinvestValueGoodCall extends ethereum.Call {
  get inputs(): DisinvestValueGoodCall__Inputs {
    return new DisinvestValueGoodCall__Inputs(this);
  }

  get outputs(): DisinvestValueGoodCall__Outputs {
    return new DisinvestValueGoodCall__Outputs(this);
  }
}

export class DisinvestValueGoodCall__Inputs {
  _call: DisinvestValueGoodCall;

  constructor(call: DisinvestValueGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodQuanitity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DisinvestValueGoodCall__Outputs {
  _call: DisinvestValueGoodCall;

  constructor(call: DisinvestValueGoodCall) {
    this._call = call;
  }

  get disinvestResult_(): DisinvestValueGoodCallDisinvestResult_Struct {
    return changetype<DisinvestValueGoodCallDisinvestResult_Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get valueProofno_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DisinvestValueGoodCallDisinvestResult_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class DisinvestValueProofCall extends ethereum.Call {
  get inputs(): DisinvestValueProofCall__Inputs {
    return new DisinvestValueProofCall__Inputs(this);
  }

  get outputs(): DisinvestValueProofCall__Outputs {
    return new DisinvestValueProofCall__Outputs(this);
  }
}

export class DisinvestValueProofCall__Inputs {
  _call: DisinvestValueProofCall;

  constructor(call: DisinvestValueProofCall) {
    this._call = call;
  }

  get _valueproofid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodQuanitity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DisinvestValueProofCall__Outputs {
  _call: DisinvestValueProofCall;

  constructor(call: DisinvestValueProofCall) {
    this._call = call;
  }

  get disinvestResult_(): DisinvestValueProofCallDisinvestResult_Struct {
    return changetype<DisinvestValueProofCallDisinvestResult_Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }
}

export class DisinvestValueProofCallDisinvestResult_Struct extends ethereum.Tuple {
  get profit(): BigInt {
    return this[0].toBigInt();
  }

  get actual_fee(): BigInt {
    return this[1].toBigInt();
  }

  get actualDisinvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualDisinvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitMetaGoodCall extends ethereum.Call {
  get inputs(): InitMetaGoodCall__Inputs {
    return new InitMetaGoodCall__Inputs(this);
  }

  get outputs(): InitMetaGoodCall__Outputs {
    return new InitMetaGoodCall__Outputs(this);
  }
}

export class InitMetaGoodCall__Inputs {
  _call: InitMetaGoodCall;

  constructor(call: InitMetaGoodCall) {
    this._call = call;
  }

  get _erc20address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _initial(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _goodConfig(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitMetaGoodCall__Outputs {
  _call: InitMetaGoodCall;

  constructor(call: InitMetaGoodCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class InitNormalGoodCall extends ethereum.Call {
  get inputs(): InitNormalGoodCall__Inputs {
    return new InitNormalGoodCall__Inputs(this);
  }

  get outputs(): InitNormalGoodCall__Outputs {
    return new InitNormalGoodCall__Outputs(this);
  }
}

export class InitNormalGoodCall__Inputs {
  _call: InitNormalGoodCall;

  constructor(call: InitNormalGoodCall) {
    this._call = call;
  }

  get _valuegood(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _initial(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _erc20address(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _goodConfig(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitNormalGoodCall__Outputs {
  _call: InitNormalGoodCall;

  constructor(call: InitNormalGoodCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class InvestNormalGoodCall extends ethereum.Call {
  get inputs(): InvestNormalGoodCall__Inputs {
    return new InvestNormalGoodCall__Inputs(this);
  }

  get outputs(): InvestNormalGoodCall__Outputs {
    return new InvestNormalGoodCall__Outputs(this);
  }
}

export class InvestNormalGoodCall__Inputs {
  _call: InvestNormalGoodCall;

  constructor(call: InvestNormalGoodCall) {
    this._call = call;
  }

  get _togood(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _valuegood(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _quanitity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InvestNormalGoodCall__Outputs {
  _call: InvestNormalGoodCall;

  constructor(call: InvestNormalGoodCall) {
    this._call = call;
  }

  get normalInvest_(): InvestNormalGoodCallNormalInvest_Struct {
    return changetype<InvestNormalGoodCallNormalInvest_Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get valueInvest_(): InvestNormalGoodCallValueInvest_Struct {
    return changetype<InvestNormalGoodCallValueInvest_Struct>(
      this._call.outputValues[1].value.toTuple(),
    );
  }

  get proofno_(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class InvestNormalGoodCallNormalInvest_Struct extends ethereum.Tuple {
  get actualFeeQuantity(): BigInt {
    return this[0].toBigInt();
  }

  get contructFeeQuantity(): BigInt {
    return this[1].toBigInt();
  }

  get actualInvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualInvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class InvestNormalGoodCallValueInvest_Struct extends ethereum.Tuple {
  get actualFeeQuantity(): BigInt {
    return this[0].toBigInt();
  }

  get contructFeeQuantity(): BigInt {
    return this[1].toBigInt();
  }

  get actualInvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualInvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class InvestValueGoodCall extends ethereum.Call {
  get inputs(): InvestValueGoodCall__Inputs {
    return new InvestValueGoodCall__Inputs(this);
  }

  get outputs(): InvestValueGoodCall__Outputs {
    return new InvestValueGoodCall__Outputs(this);
  }
}

export class InvestValueGoodCall__Inputs {
  _call: InvestValueGoodCall;

  constructor(call: InvestValueGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodQuanitity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _gater(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InvestValueGoodCall__Outputs {
  _call: InvestValueGoodCall;

  constructor(call: InvestValueGoodCall) {
    this._call = call;
  }

  get valueInvest_(): InvestValueGoodCallValueInvest_Struct {
    return changetype<InvestValueGoodCallValueInvest_Struct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get valueProofno_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class InvestValueGoodCallValueInvest_Struct extends ethereum.Tuple {
  get actualFeeQuantity(): BigInt {
    return this[0].toBigInt();
  }

  get contructFeeQuantity(): BigInt {
    return this[1].toBigInt();
  }

  get actualInvestValue(): BigInt {
    return this[2].toBigInt();
  }

  get actualInvestQuantity(): BigInt {
    return this[3].toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PayGoodCall extends ethereum.Call {
  get inputs(): PayGoodCall__Inputs {
    return new PayGoodCall__Inputs(this);
  }

  get outputs(): PayGoodCall__Outputs {
    return new PayGoodCall__Outputs(this);
  }
}

export class PayGoodCall__Inputs {
  _call: PayGoodCall;

  constructor(call: PayGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _payquanity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _recipent(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class PayGoodCall__Outputs {
  _call: PayGoodCall;

  constructor(call: PayGoodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemovebanlistCall extends ethereum.Call {
  get inputs(): RemovebanlistCall__Inputs {
    return new RemovebanlistCall__Inputs(this);
  }

  get outputs(): RemovebanlistCall__Outputs {
    return new RemovebanlistCall__Outputs(this);
  }
}

export class RemovebanlistCall__Inputs {
  _call: RemovebanlistCall;

  constructor(call: RemovebanlistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovebanlistCall__Outputs {
  _call: RemovebanlistCall;

  constructor(call: RemovebanlistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get proofid(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMarketConfigCall extends ethereum.Call {
  get inputs(): SetMarketConfigCall__Inputs {
    return new SetMarketConfigCall__Inputs(this);
  }

  get outputs(): SetMarketConfigCall__Outputs {
    return new SetMarketConfigCall__Outputs(this);
  }
}

export class SetMarketConfigCall__Inputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get _marketconfig(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMarketConfigCall__Outputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get proofid(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateGoodConfigCall extends ethereum.Call {
  get inputs(): UpdateGoodConfigCall__Inputs {
    return new UpdateGoodConfigCall__Inputs(this);
  }

  get outputs(): UpdateGoodConfigCall__Outputs {
    return new UpdateGoodConfigCall__Outputs(this);
  }
}

export class UpdateGoodConfigCall__Inputs {
  _call: UpdateGoodConfigCall;

  constructor(call: UpdateGoodConfigCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _goodConfig(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateGoodConfigCall__Outputs {
  _call: UpdateGoodConfigCall;

  constructor(call: UpdateGoodConfigCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdatetoNormalGoodCall extends ethereum.Call {
  get inputs(): UpdatetoNormalGoodCall__Inputs {
    return new UpdatetoNormalGoodCall__Inputs(this);
  }

  get outputs(): UpdatetoNormalGoodCall__Outputs {
    return new UpdatetoNormalGoodCall__Outputs(this);
  }
}

export class UpdatetoNormalGoodCall__Inputs {
  _call: UpdatetoNormalGoodCall;

  constructor(call: UpdatetoNormalGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatetoNormalGoodCall__Outputs {
  _call: UpdatetoNormalGoodCall;

  constructor(call: UpdatetoNormalGoodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdatetoValueGoodCall extends ethereum.Call {
  get inputs(): UpdatetoValueGoodCall__Inputs {
    return new UpdatetoValueGoodCall__Inputs(this);
  }

  get outputs(): UpdatetoValueGoodCall__Outputs {
    return new UpdatetoValueGoodCall__Outputs(this);
  }
}

export class UpdatetoValueGoodCall__Inputs {
  _call: UpdatetoValueGoodCall;

  constructor(call: UpdatetoValueGoodCall) {
    this._call = call;
  }

  get _goodid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatetoValueGoodCall__Outputs {
  _call: UpdatetoValueGoodCall;

  constructor(call: UpdatetoValueGoodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
