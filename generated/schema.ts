// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Customer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Customer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Customer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Customer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Customer | null {
    return changetype<Customer | null>(store.get_in_block("Customer", id));
  }

  static load(id: string): Customer | null {
    return changetype<Customer | null>(store.get("Customer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get refer(): string | null {
    let value = this.get("refer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set refer(value: string | null) {
    if (!value) {
      this.unset("refer");
    } else {
      this.set("refer", Value.fromString(<string>value));
    }
  }

  get tradeValue(): BigInt {
    let value = this.get("tradeValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeValue(value: BigInt) {
    this.set("tradeValue", Value.fromBigInt(value));
  }

  get investValue(): BigInt {
    let value = this.get("investValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investValue(value: BigInt) {
    this.set("investValue", Value.fromBigInt(value));
  }

  get disinvestValue(): BigInt {
    let value = this.get("disinvestValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set disinvestValue(value: BigInt) {
    this.set("disinvestValue", Value.fromBigInt(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get investCount(): BigInt {
    let value = this.get("investCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investCount(value: BigInt) {
    this.set("investCount", Value.fromBigInt(value));
  }

  get disinvestCount(): BigInt {
    let value = this.get("disinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set disinvestCount(value: BigInt) {
    this.set("disinvestCount", Value.fromBigInt(value));
  }

  get isBanlist(): boolean {
    let value = this.get("isBanlist");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isBanlist(value: boolean) {
    this.set("isBanlist", Value.fromBoolean(value));
  }
}

export class MarketState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketState | null {
    return changetype<MarketState | null>(
      store.get_in_block("MarketState", id),
    );
  }

  static load(id: string): MarketState | null {
    return changetype<MarketState | null>(store.get("MarketState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketConfig(): BigInt {
    let value = this.get("marketConfig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketConfig(value: BigInt) {
    this.set("marketConfig", Value.fromBigInt(value));
  }

  get pargoodCount(): BigInt {
    let value = this.get("pargoodCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pargoodCount(value: BigInt) {
    this.set("pargoodCount", Value.fromBigInt(value));
  }

  get goodCount(): BigInt {
    let value = this.get("goodCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set goodCount(value: BigInt) {
    this.set("goodCount", Value.fromBigInt(value));
  }

  get proofCount(): BigInt {
    let value = this.get("proofCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proofCount(value: BigInt) {
    this.set("proofCount", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalTradeValue(): BigInt {
    let value = this.get("totalTradeValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeValue(value: BigInt) {
    this.set("totalTradeValue", Value.fromBigInt(value));
  }

  get totalInvestValue(): BigInt {
    let value = this.get("totalInvestValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestValue(value: BigInt) {
    this.set("totalInvestValue", Value.fromBigInt(value));
  }

  get totalDisinvestValue(): BigInt {
    let value = this.get("totalDisinvestValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestValue(value: BigInt) {
    this.set("totalDisinvestValue", Value.fromBigInt(value));
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get totalInvestCount(): BigInt {
    let value = this.get("totalInvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestCount(value: BigInt) {
    this.set("totalInvestCount", Value.fromBigInt(value));
  }

  get totalDisinvestCount(): BigInt {
    let value = this.get("totalDisinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestCount(value: BigInt) {
    this.set("totalDisinvestCount", Value.fromBigInt(value));
  }

  get marketCreator(): string {
    let value = this.get("marketCreator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketCreator(value: string) {
    this.set("marketCreator", Value.fromString(value));
  }
}

export class GoodState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GoodState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GoodState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GoodState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GoodState | null {
    return changetype<GoodState | null>(store.get_in_block("GoodState", id));
  }

  static load(id: string): GoodState | null {
    return changetype<GoodState | null>(store.get("GoodState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pargood(): string {
    let value = this.get("pargood");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pargood(value: string) {
    this.set("pargood", Value.fromString(value));
  }

  get tokenname(): string {
    let value = this.get("tokenname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenname(value: string) {
    this.set("tokenname", Value.fromString(value));
  }

  get tokensymbol(): string {
    let value = this.get("tokensymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokensymbol(value: string) {
    this.set("tokensymbol", Value.fromString(value));
  }

  get tokentotalsuply(): BigInt {
    let value = this.get("tokentotalsuply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokentotalsuply(value: BigInt) {
    this.set("tokentotalsuply", Value.fromBigInt(value));
  }

  get tokendecimals(): BigInt {
    let value = this.get("tokendecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokendecimals(value: BigInt) {
    this.set("tokendecimals", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get erc20Address(): string {
    let value = this.get("erc20Address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set erc20Address(value: string) {
    this.set("erc20Address", Value.fromString(value));
  }

  get goodConfig(): BigInt {
    let value = this.get("goodConfig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set goodConfig(value: BigInt) {
    this.set("goodConfig", Value.fromBigInt(value));
  }

  get currentValue(): BigInt {
    let value = this.get("currentValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentValue(value: BigInt) {
    this.set("currentValue", Value.fromBigInt(value));
  }

  get currentQuantity(): BigInt {
    let value = this.get("currentQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentQuantity(value: BigInt) {
    this.set("currentQuantity", Value.fromBigInt(value));
  }

  get investValue(): BigInt {
    let value = this.get("investValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investValue(value: BigInt) {
    this.set("investValue", Value.fromBigInt(value));
  }

  get investQuantity(): BigInt {
    let value = this.get("investQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investQuantity(value: BigInt) {
    this.set("investQuantity", Value.fromBigInt(value));
  }

  get feeQuantity(): BigInt {
    let value = this.get("feeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeQuantity(value: BigInt) {
    this.set("feeQuantity", Value.fromBigInt(value));
  }

  get contructFee(): BigInt {
    let value = this.get("contructFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contructFee(value: BigInt) {
    this.set("contructFee", Value.fromBigInt(value));
  }

  get totalTradeQuantity(): BigInt {
    let value = this.get("totalTradeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeQuantity(value: BigInt) {
    this.set("totalTradeQuantity", Value.fromBigInt(value));
  }

  get totalInvestQuantity(): BigInt {
    let value = this.get("totalInvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestQuantity(value: BigInt) {
    this.set("totalInvestQuantity", Value.fromBigInt(value));
  }

  get totalDisinvestQuantity(): BigInt {
    let value = this.get("totalDisinvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestQuantity(value: BigInt) {
    this.set("totalDisinvestQuantity", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt) {
    this.set("totalProfit", Value.fromBigInt(value));
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get totalInvestCount(): BigInt {
    let value = this.get("totalInvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestCount(value: BigInt) {
    this.set("totalInvestCount", Value.fromBigInt(value));
  }

  get totalDisinvestCount(): BigInt {
    let value = this.get("totalDisinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestCount(value: BigInt) {
    this.set("totalDisinvestCount", Value.fromBigInt(value));
  }

  get modifiedTime(): BigInt {
    let value = this.get("modifiedTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set modifiedTime(value: BigInt) {
    this.set("modifiedTime", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get normalProof_v(): ProofStateLoader {
    return new ProofStateLoader(
      "GoodState",
      this.get("id")!.toString(),
      "normalProof_v",
    );
  }

  get normalProof_n(): ProofStateLoader {
    return new ProofStateLoader(
      "GoodState",
      this.get("id")!.toString(),
      "normalProof_n",
    );
  }

  get goodData(): GoodDataLoader {
    return new GoodDataLoader(
      "GoodState",
      this.get("id")!.toString(),
      "goodData",
    );
  }
}

export class ParGoodState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParGoodState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ParGoodState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ParGoodState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ParGoodState | null {
    return changetype<ParGoodState | null>(
      store.get_in_block("ParGoodState", id),
    );
  }

  static load(id: string): ParGoodState | null {
    return changetype<ParGoodState | null>(store.get("ParGoodState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenname(): string {
    let value = this.get("tokenname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenname(value: string) {
    this.set("tokenname", Value.fromString(value));
  }

  get tokensymbol(): string {
    let value = this.get("tokensymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokensymbol(value: string) {
    this.set("tokensymbol", Value.fromString(value));
  }

  get tokentotalsuply(): BigInt {
    let value = this.get("tokentotalsuply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokentotalsuply(value: BigInt) {
    this.set("tokentotalsuply", Value.fromBigInt(value));
  }

  get tokendecimals(): BigInt {
    let value = this.get("tokendecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokendecimals(value: BigInt) {
    this.set("tokendecimals", Value.fromBigInt(value));
  }

  get erc20Address(): string {
    let value = this.get("erc20Address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set erc20Address(value: string) {
    this.set("erc20Address", Value.fromString(value));
  }

  get currentValue(): BigInt {
    let value = this.get("currentValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentValue(value: BigInt) {
    this.set("currentValue", Value.fromBigInt(value));
  }

  get currentQuantity(): BigInt {
    let value = this.get("currentQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentQuantity(value: BigInt) {
    this.set("currentQuantity", Value.fromBigInt(value));
  }

  get investValue(): BigInt {
    let value = this.get("investValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investValue(value: BigInt) {
    this.set("investValue", Value.fromBigInt(value));
  }

  get investQuantity(): BigInt {
    let value = this.get("investQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investQuantity(value: BigInt) {
    this.set("investQuantity", Value.fromBigInt(value));
  }

  get feeQuantity(): BigInt {
    let value = this.get("feeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeQuantity(value: BigInt) {
    this.set("feeQuantity", Value.fromBigInt(value));
  }

  get contructFee(): BigInt {
    let value = this.get("contructFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contructFee(value: BigInt) {
    this.set("contructFee", Value.fromBigInt(value));
  }

  get totalTradeQuantity(): BigInt {
    let value = this.get("totalTradeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeQuantity(value: BigInt) {
    this.set("totalTradeQuantity", Value.fromBigInt(value));
  }

  get totalInvestQuantity(): BigInt {
    let value = this.get("totalInvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestQuantity(value: BigInt) {
    this.set("totalInvestQuantity", Value.fromBigInt(value));
  }

  get totalDisinvestQuantity(): BigInt {
    let value = this.get("totalDisinvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestQuantity(value: BigInt) {
    this.set("totalDisinvestQuantity", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt) {
    this.set("totalProfit", Value.fromBigInt(value));
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get totalInvestCount(): BigInt {
    let value = this.get("totalInvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestCount(value: BigInt) {
    this.set("totalInvestCount", Value.fromBigInt(value));
  }

  get totalDisinvestCount(): BigInt {
    let value = this.get("totalDisinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestCount(value: BigInt) {
    this.set("totalDisinvestCount", Value.fromBigInt(value));
  }

  get goodCount(): BigInt {
    let value = this.get("goodCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set goodCount(value: BigInt) {
    this.set("goodCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get Goodlist(): GoodStateLoader {
    return new GoodStateLoader(
      "ParGoodState",
      this.get("id")!.toString(),
      "Goodlist",
    );
  }

  get parGooddata(): ParGoodDataLoader {
    return new ParGoodDataLoader(
      "ParGoodState",
      this.get("id")!.toString(),
      "parGooddata",
    );
  }
}

export class ProofState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProofState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProofState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProofState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProofState | null {
    return changetype<ProofState | null>(store.get_in_block("ProofState", id));
  }

  static load(id: string): ProofState | null {
    return changetype<ProofState | null>(store.get("ProofState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get good1(): string {
    let value = this.get("good1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set good1(value: string) {
    this.set("good1", Value.fromString(value));
  }

  get good2(): string {
    let value = this.get("good2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set good2(value: string) {
    this.set("good2", Value.fromString(value));
  }

  get proofValue(): BigInt {
    let value = this.get("proofValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proofValue(value: BigInt) {
    this.set("proofValue", Value.fromBigInt(value));
  }

  get good1ContructFee(): BigInt {
    let value = this.get("good1ContructFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set good1ContructFee(value: BigInt) {
    this.set("good1ContructFee", Value.fromBigInt(value));
  }

  get good1Quantity(): BigInt {
    let value = this.get("good1Quantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set good1Quantity(value: BigInt) {
    this.set("good1Quantity", Value.fromBigInt(value));
  }

  get good2ContructFee(): BigInt {
    let value = this.get("good2ContructFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set good2ContructFee(value: BigInt) {
    this.set("good2ContructFee", Value.fromBigInt(value));
  }

  get good2Quantity(): BigInt {
    let value = this.get("good2Quantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set good2Quantity(value: BigInt) {
    this.set("good2Quantity", Value.fromBigInt(value));
  }

  get createTime(): BigInt {
    let value = this.get("createTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createTime(value: BigInt) {
    this.set("createTime", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transtype(): string {
    let value = this.get("transtype");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transtype(value: string) {
    this.set("transtype", Value.fromString(value));
  }

  get fromgood(): string {
    let value = this.get("fromgood");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromgood(value: string) {
    this.set("fromgood", Value.fromString(value));
  }

  get togood(): string {
    let value = this.get("togood");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set togood(value: string) {
    this.set("togood", Value.fromString(value));
  }

  get frompargood(): string {
    let value = this.get("frompargood");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set frompargood(value: string) {
    this.set("frompargood", Value.fromString(value));
  }

  get topargood(): string {
    let value = this.get("topargood");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set topargood(value: string) {
    this.set("topargood", Value.fromString(value));
  }

  get fromgoodQuanity(): BigInt {
    let value = this.get("fromgoodQuanity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fromgoodQuanity(value: BigInt) {
    this.set("fromgoodQuanity", Value.fromBigInt(value));
  }

  get fromgoodfee(): BigInt {
    let value = this.get("fromgoodfee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fromgoodfee(value: BigInt) {
    this.set("fromgoodfee", Value.fromBigInt(value));
  }

  get togoodQuantity(): BigInt {
    let value = this.get("togoodQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set togoodQuantity(value: BigInt) {
    this.set("togoodQuantity", Value.fromBigInt(value));
  }

  get togoodfee(): BigInt {
    let value = this.get("togoodfee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set togoodfee(value: BigInt) {
    this.set("togoodfee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class GoodData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GoodData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GoodData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GoodData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GoodData | null {
    return changetype<GoodData | null>(store.get_in_block("GoodData", id));
  }

  static load(id: string): GoodData | null {
    return changetype<GoodData | null>(store.get("GoodData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get good(): string {
    let value = this.get("good");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set good(value: string) {
    this.set("good", Value.fromString(value));
  }

  get modifiedTime(): BigInt {
    let value = this.get("modifiedTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set modifiedTime(value: BigInt) {
    this.set("modifiedTime", Value.fromBigInt(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get currentValue(): BigInt {
    let value = this.get("currentValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentValue(value: BigInt) {
    this.set("currentValue", Value.fromBigInt(value));
  }

  get currentQuantity(): BigInt {
    let value = this.get("currentQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentQuantity(value: BigInt) {
    this.set("currentQuantity", Value.fromBigInt(value));
  }

  get investValue(): BigInt {
    let value = this.get("investValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investValue(value: BigInt) {
    this.set("investValue", Value.fromBigInt(value));
  }

  get investQuantity(): BigInt {
    let value = this.get("investQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investQuantity(value: BigInt) {
    this.set("investQuantity", Value.fromBigInt(value));
  }

  get feeQuantity(): BigInt {
    let value = this.get("feeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeQuantity(value: BigInt) {
    this.set("feeQuantity", Value.fromBigInt(value));
  }

  get contructFee(): BigInt {
    let value = this.get("contructFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contructFee(value: BigInt) {
    this.set("contructFee", Value.fromBigInt(value));
  }

  get totalTradeQuantity(): BigInt {
    let value = this.get("totalTradeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeQuantity(value: BigInt) {
    this.set("totalTradeQuantity", Value.fromBigInt(value));
  }

  get totalInvestQuantity(): BigInt {
    let value = this.get("totalInvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestQuantity(value: BigInt) {
    this.set("totalInvestQuantity", Value.fromBigInt(value));
  }

  get totalDisinvestQuantity(): BigInt {
    let value = this.get("totalDisinvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestQuantity(value: BigInt) {
    this.set("totalDisinvestQuantity", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt) {
    this.set("totalProfit", Value.fromBigInt(value));
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get totalInvestCount(): BigInt {
    let value = this.get("totalInvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestCount(value: BigInt) {
    this.set("totalInvestCount", Value.fromBigInt(value));
  }

  get totalDisinvestCount(): BigInt {
    let value = this.get("totalDisinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestCount(value: BigInt) {
    this.set("totalDisinvestCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class ParGoodData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParGoodData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ParGoodData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ParGoodData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ParGoodData | null {
    return changetype<ParGoodData | null>(
      store.get_in_block("ParGoodData", id),
    );
  }

  static load(id: string): ParGoodData | null {
    return changetype<ParGoodData | null>(store.get("ParGoodData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pargood(): string {
    let value = this.get("pargood");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pargood(value: string) {
    this.set("pargood", Value.fromString(value));
  }

  get modifiedTime(): BigInt {
    let value = this.get("modifiedTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set modifiedTime(value: BigInt) {
    this.set("modifiedTime", Value.fromBigInt(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get currentValue(): BigInt {
    let value = this.get("currentValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentValue(value: BigInt) {
    this.set("currentValue", Value.fromBigInt(value));
  }

  get currentQuantity(): BigInt {
    let value = this.get("currentQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentQuantity(value: BigInt) {
    this.set("currentQuantity", Value.fromBigInt(value));
  }

  get investValue(): BigInt {
    let value = this.get("investValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investValue(value: BigInt) {
    this.set("investValue", Value.fromBigInt(value));
  }

  get investQuantity(): BigInt {
    let value = this.get("investQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investQuantity(value: BigInt) {
    this.set("investQuantity", Value.fromBigInt(value));
  }

  get feeQuantity(): BigInt {
    let value = this.get("feeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeQuantity(value: BigInt) {
    this.set("feeQuantity", Value.fromBigInt(value));
  }

  get contructFee(): BigInt {
    let value = this.get("contructFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contructFee(value: BigInt) {
    this.set("contructFee", Value.fromBigInt(value));
  }

  get totalTradeQuantity(): BigInt {
    let value = this.get("totalTradeQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeQuantity(value: BigInt) {
    this.set("totalTradeQuantity", Value.fromBigInt(value));
  }

  get totalInvestQuantity(): BigInt {
    let value = this.get("totalInvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestQuantity(value: BigInt) {
    this.set("totalInvestQuantity", Value.fromBigInt(value));
  }

  get totalDisinvestQuantity(): BigInt {
    let value = this.get("totalDisinvestQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestQuantity(value: BigInt) {
    this.set("totalDisinvestQuantity", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt) {
    this.set("totalProfit", Value.fromBigInt(value));
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get totalInvestCount(): BigInt {
    let value = this.get("totalInvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestCount(value: BigInt) {
    this.set("totalInvestCount", Value.fromBigInt(value));
  }

  get totalDisinvestCount(): BigInt {
    let value = this.get("totalDisinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestCount(value: BigInt) {
    this.set("totalDisinvestCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class MarketData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketData | null {
    return changetype<MarketData | null>(store.get_in_block("MarketData", id));
  }

  static load(id: string): MarketData | null {
    return changetype<MarketData | null>(store.get("MarketData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketConfig(): BigInt {
    let value = this.get("marketConfig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketConfig(value: BigInt) {
    this.set("marketConfig", Value.fromBigInt(value));
  }

  get pargoodCount(): BigInt {
    let value = this.get("pargoodCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pargoodCount(value: BigInt) {
    this.set("pargoodCount", Value.fromBigInt(value));
  }

  get goodCount(): BigInt {
    let value = this.get("goodCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set goodCount(value: BigInt) {
    this.set("goodCount", Value.fromBigInt(value));
  }

  get proofCount(): BigInt {
    let value = this.get("proofCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proofCount(value: BigInt) {
    this.set("proofCount", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalTradeValue(): BigInt {
    let value = this.get("totalTradeValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeValue(value: BigInt) {
    this.set("totalTradeValue", Value.fromBigInt(value));
  }

  get totalInvestValue(): BigInt {
    let value = this.get("totalInvestValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestValue(value: BigInt) {
    this.set("totalInvestValue", Value.fromBigInt(value));
  }

  get totalDisinvestValue(): BigInt {
    let value = this.get("totalDisinvestValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestValue(value: BigInt) {
    this.set("totalDisinvestValue", Value.fromBigInt(value));
  }

  get totalTradeCount(): BigInt {
    let value = this.get("totalTradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTradeCount(value: BigInt) {
    this.set("totalTradeCount", Value.fromBigInt(value));
  }

  get totalInvestCount(): BigInt {
    let value = this.get("totalInvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestCount(value: BigInt) {
    this.set("totalInvestCount", Value.fromBigInt(value));
  }

  get totalDisinvestCount(): BigInt {
    let value = this.get("totalDisinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDisinvestCount(value: BigInt) {
    this.set("totalDisinvestCount", Value.fromBigInt(value));
  }

  get modifiedTime(): BigInt {
    let value = this.get("modifiedTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set modifiedTime(value: BigInt) {
    this.set("modifiedTime", Value.fromBigInt(value));
  }
}

export class ProofStateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ProofState[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ProofState[]>(value);
  }
}

export class GoodDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): GoodData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<GoodData[]>(value);
  }
}

export class GoodStateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): GoodState[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<GoodState[]>(value);
  }
}

export class ParGoodDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ParGoodData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ParGoodData[]>(value);
  }
}
